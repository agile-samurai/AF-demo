resource_types:
  - name: terraform
    type: docker-image
    source:
      repository: ljfranklin/terraform-resource
  - name: latest-docker-image
    type: docker-image
    privileged: true
    source:
      repository: concourse/docker-image-resource
      tag: latest
  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource
  - name: simple-s3-resource
    type: docker-image
    source:
      repository: 18fgsa/s3-resource-simple
# - name: maven-resource
#   type: docker-image
#   source:
#     repository: pivotalpa/maven-resource
#     tag: latest

resources:
  # - name: unprocessed-training-data
  #   type: s3
  #   source:
  #     bucket: mdas-ugroup-training-data
  #     access_key_id: ((aws_access_key_id))
  #     secret_access_key: ((aws_secret_access_key))
  # - name: processed-training-data
  #   type: s3
  #   source:
  #     bucket: mdas-ugroup-processed-training-data
  #     access_key_id: ((aws_access_key_id))
  #     secret_access_key: ((aws_secret_access_key))
  - name: slack-notify
    type: slack-notification
    source:
      url: ((slack_webhook))
  - name: terraform
    type: terraform
    source:
      backend_type: s3
      backend_config:
        bucket: ((tf_backend))
        key: mdas-terraform.tfstate
        region: ((bucket_aws_region))
        access_key: ((aws_access_key_id))
        secret_key: ((aws_secret_access_key))
      vars:
        tag_name: concourse
      env:
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
  #      TF_LOG: DEBUG
  - name: source
    type: git
    source: &repo-source
      uri: ((git_source_url))
      branch: master
      private_key: ((git_private_key))
      # ignore_paths: [services/scoring-service, notebooks]
  - name: training_source
    type: git
    source: &repo-source
      paths: [services/scoring-service, notebooks, tools]
      uri: ((git_source_url))
      branch: master
      private_key: ((git_private_key))
  - name: version
    type: semver
    source:
      driver: git
      uri: ((git_version_url))
      initial_version: 0.0.1
      branch: version
      file: version
      private_key: ((git_private_key))
  ################### ECR REPOS ######################
  - name: jupyter-notebook-docker-image
    type: latest-docker-image
    source:
      aws_access_key_id: ((aws_access_key_id))
      aws_secret_access_key: ((aws_secret_access_key))
      repository: ((aws_account_id)).dkr.ecr.us-east-1.amazonaws.com/jupyeter-nb-repo
  - name: server-docker-image
    type: latest-docker-image
    source:
      aws_access_key_id: ((aws_access_key_id))
      aws_secret_access_key: ((aws_secret_access_key))
      repository: ((aws_account_id)).dkr.ecr.us-east-1.amazonaws.com/server-repo
  - name: main-ds-service-docker-image
    type: latest-docker-image
    source:
      repository: ((aws_account_id)).dkr.ecr.us-east-1.amazonaws.com/scoring-service-repo
      aws_access_key_id: ((aws_access_key_id))
      aws_secret_access_key: ((aws_secret_access_key))
  - name: sector-ui-docker-image
    type: latest-docker-image
    source:
      repository: ((aws_account_id)).dkr.ecr.us-east-1.amazonaws.com/sector-ui-repo
      aws_access_key_id: ((aws_access_key_id))
      aws_secret_access_key: ((aws_secret_access_key))
  - name: processed-training-data
    type: simple-s3-resource
    source:
      access_key_id: ((aws_access_key_id))
      secret_access_key: ((aws_secret_access_key))
      bucket: mdas-ugroup-training-data
      # path: [<optional>, use to sync to a specific path of the bucket instead of root of bucket]
      # options: [<optional, see note below>]
      region: us-east-1


#- name: sagemaker-pytorch-ner-image
#  type: latest-docker-image
#  source:
#    repository: 971148336196.dkr.ecr.us-east-1.amazonaws.com/sagemaker-pytorch-ner
#    aws_access_key_id: ((aws_access_key_id))
#    aws_secret_access_key: ((aws_secret_access_key))

jobs:
  - name: Create Training Set
    public: true
    plan:
      # - put: terraform
      #   params:
      #     terraform_source: source/config/data-setup
      #     plan_only: true
      #     env_name: terraform
      #     vars:
      #       environment: terraform
      - get: training_source
      # - get: unprocessed-training-data
      - task: Create Training Set
        privileged: true
        config:
          platform: linux
          image_resource:
            type: latest-docker-image
            source:
              repository: bradbytecubed/mdas-pipeline
          inputs:
            - name: training_source
          outputs:
            - name: processed-training-data
          run:
            path: bash
            args:
            - -ec
            - |
              export PLATFORM_TRAINING_DATA_PATH=$PWD/processed-training-data
              pwd
              ls
              cd training_source/tools/training/data-importer-batch
              mvn spring-boot:run
      - put: processed-training-data

  - name: Initialize-Models
    public: true
    plan:
      - get: training_source
        trigger: true
      - get: version
  - name: Train Models
    public: true
    plan:
      - get: training_source
        trigger: true
        passed: [Initialize-Models, Create Training Set]
      - get: version
      - get: processed-training-data

  - name: Initialize
    public: true
    plan:
      - get: source
        trigger: true
      - get: version

  ###################### BUILD SERVICES ############################
  - name: Build-sector-ui
    public: true
    serial: true
    plan:
      - get: source
        trigger: true
        params: {depth: 10}
        passed: [Initialize]
      - get: version
        passed: [Initialize]
      - task: Build front end
        config:
          platform: linux
          image_resource:
            type: latest-docker-image
            source: {repository: node}
          inputs:
            - name: source
          outputs:
            - name: docker
          run:
            path: source/ui/sector-ui/container/build-sector-ui-concourse.sh
        on_failure:
          put: slack-notify
          params:
            text: |
              "Build failed on job 'Build-Project'. Check it out at: 'http://http://concourse.mdas2.com/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME'"
            silent: true
  - name: Build main-ds-service
    public: true
    plan:
      - get: source
        passed:
          - Initialize
        trigger: true
        params:
          depth: 10
#      - get: training_source
#        passed:
#          - Train Models
#        trigger: true
#        params:
#          depth: 10
      - get: version
        passed:
          - Initialize
        trigger: true
      - task: Build main-ds-service Project
        params:
          AWS_ACCESS_KEY_ID: ((aws_access_key_id))
          AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: carlomazzaferro/concourse-python-minimal
          run:
            path: source/services/scoring-service/config/pipeline/build-service.sh
          inputs:
            - name: source
          outputs:
            - name: docker
  - name: Build jupyter-notebook
    public: true
    plan:
      - get: source
        passed:
          - Initialize
        trigger: true
        params:
          depth: 10
      - get: version
        passed:
          - Initialize
      - task: Build jupyter-notebook
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: bradbytecubed/mdas-pipeline
          run:
            path: source/notebooks/config/pipeline/build-service.sh
          inputs:
            - name: source
          outputs:
            - name: docker
  - name: Build server
    public: true
    plan:
      - get: source
        passed:
          - Initialize
        trigger: true
        params:
          depth: 10
      - get: version
        passed:
          - Initialize
        trigger: true
      - task: Build server Project
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: bradbytecubed/mdas-pipeline
          run:
            path: source/ui/server/config/pipeline/verify-service.sh
          inputs:
            - name: source
          outputs:
            - name: docker
          caches:
            - path: maven

  ###################### FUNCTIONAL TESTS############################

  - name: Execute main-ds-service Unit and Integration Tests
    public: true
    plan:
      - get: source
        trigger: true
        passed: [Build main-ds-service]
      - get: version
        passed: [Build main-ds-service]
      - task: Execute Test
        params:
          AWS_ACCESS_KEY_ID: ((aws_access_key_id))
          AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
          AWS_DEFAULT_REGION: us-east-1
          TESTING: 1
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: carlomazzaferro/concourse-python-minimal
          run:
            path: source/services/scoring-service/config/pipeline/test-service.sh
          inputs:
            - name: source
          outputs:
            - name: docker


  - name: Execute server Functional Tests
    public: true
    plan:
      - get: source
        passed:
          - Build server
        trigger: true
      - get: version
        passed:
          - Build server
      - task: Execute Test
        privileged: true
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: bradbytecubed/mdas-pipeline
          run:
            path: entrypoint.sh
            args:
              - bash
              - -exc
              - |
                echo "Noop for now"
          inputs:
            - name: source
          caches:
            - path: maven

###################### CONTRACT TESTS ############################
  - name: Execute main-ds-service Contract Tests
    public: true
    plan:
      - get: source
        trigger: true
        passed: [Execute main-ds-service Unit and Integration Tests]
      - get: version
        passed: [Execute main-ds-service Unit and Integration Tests]
      - task: Execute Test
        privileged: true
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: carlomazzaferro/maven-java-10-aws
          inputs:
            - name: source
          params:
            AWS_ACCESS_KEY_ID: ((aws_access_key_id))
            AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
            AWS_ACCOUNT_ID: ((aws_account_id))
            TESTING: 1
          run:
            path: entrypoint.sh
            args:
              - bash
              - -exc
              - |
                pwd
                # setup maven cache
                M2_HOME="${HOME}/.m2"
                M2_CACHE="$(pwd)/maven"
                [[ -d "${M2_CACHE}" && ! -d "${M2_HOME}" ]] && ln -s "${M2_CACHE}" "${M2_HOME}"
                # prepare and run tests
                ./source/tools/prepare-ds-service.sh testing
                # debugging the run
                cd source
                docker-compose logs -f --no-color >& dockerlogs.txt
                cd ..
                export SPRING_PROFILES_ACTIVE=contractTests; docker-compose -f source/docker-compose.yml up -d --build scoring-service
                source/wait-for-status-code-at-url.sh localhost:8083/api/v1/health/check 200
                mvn clean test -f source/services/scoring-service/contract-tests/pom.xml

  - name: Execute server Contract Tests
    public: true
    plan:
      - get: source
        passed:
          - Execute server Functional Tests
        trigger: true
      - get: version
        passed:
          - Execute server Functional Tests
      - task: Execute Test
        privileged: true
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: bradbytecubed/mdas-pipeline
          run:
            path: entrypoint.sh
            args:
              - bash
              - -exc
              - |
                echo "Noop for now"
          inputs:
            - name: source
          caches:
            - path: maven

  ###################### ARTIFACT PUBLISH ############################
  - name: Provision Docker Repositories
    public: true
    plan:
      - get: source
        trigger: true
        passed:
          - Execute main-ds-service Contract Tests
          - Execute server Contract Tests
          - Build jupyter-notebook
          - Build-sector-ui
      - put: version
        params:
          bump: minor
      - task: Write Variables
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: bytecubed/bytecubed-java-ci
          run:
            path: sh
            args:
              - -exc
              - |
                echo aws_region = \"((bucket_aws_region))\" >> vars/terraform.tfvars
                echo aws_account_id = \"((aws_account_id))\" >> vars/terraform.tfvars
                echo "Verify/Create ECR Repos"
          outputs:
            - name: vars
          inputs:
            - name: version
      - put: terraform
        params:
          terraform_source: source/config/ecr-setup
          plan_only: true
          env_name: terraform
          var_files: [./vars/terraform.tfvars]
          vars:
            environment: terraform
      - put: terraform
        params:
          terraform_source: source/config/ecr-setup
          env_name: terraform
          plan_run: true
          var_files: [./vars/terraform.tfvars]
          vars:
            environment: terraform
  - name: Push sector-ui-Image
    public: true
    plan:
      - get: source
        trigger: true
        passed: [Provision Docker Repositories]
      - get: version
        passed: [Provision Docker Repositories]
      - task: Build Test Project
        config:
          platform: linux
          image_resource:
            type: latest-docker-image
            source: {repository: node}
          inputs:
            - name: source
          outputs:
            - name: docker
          run:
            path: source/ui/sector-ui/container/build-sector-ui-concourse.sh
      - put: sector-ui-docker-image
        params: {build: docker, tag_file: version/number}

  - name: Push Jupyter Image
    public: true
    plan:
      - get: source
        passed:
          - Provision Docker Repositories
        trigger: true
      - get: version
        passed:
          - Provision Docker Repositories
      - task: Push Jupyter Image
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: bradbytecubed/mdas-pipeline
          run:
            path: source/notebooks/config/pipeline/build-service.sh
          inputs:
            - name: source
          outputs:
            - name: docker
      - put: jupyter-notebook-docker-image
        params:
          build: docker
          build_args:
            PW: ((jupyter_password))
          tag_file: version/number
  - name: Push server Image
    public: true
    plan:
      - get: source
        passed:
          - Provision Docker Repositories
        trigger: true
      - get: version
        passed:
          - Provision Docker Repositories
      - task: Build Test Project
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: bradbytecubed/mdas-pipeline
          run:
            path: source/ui/server/config/pipeline/build-service.sh
          inputs:
            - name: source
          outputs:
            - name: docker
          caches:
            - path: maven
      - put: server-docker-image
        params:
          build: docker
          tag_file: version/number
  - name: Push main-ds-service Image
    public: true
    plan:
      - get: source
        passed:
          - Provision Docker Repositories
        trigger: true
      - get: version
        passed:
          - Provision Docker Repositories
      - task: Build Test Project
        params:
          AWS_ACCESS_KEY_ID: ((aws_access_key_id))
          AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
          AWS_DEFAULT_REGION: us-east-1
          AWS_ACCOUNT_ID: ((aws_account_id))
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: carlomazzaferro/concourse-python-minimal
          run:
            path: source/services/scoring-service/config/pipeline/build-service.sh
          inputs:
            - name: source
          outputs:
            - name: docker
      - put: main-ds-service-docker-image
        params:
          build: docker
          tag_file: version/number

###################### DEPLOY SERVICE ############################
  - name: Deploy Services To Dev
    serial: true
    plan:
    - get: source
      passed:
      - Push Jupyter Image
      - Push main-ds-service Image
      - Push server Image
      - Push sector-ui-Image
      trigger: true
    - get: version
      passed:
      - Push Jupyter Image
      - Push main-ds-service Image
      - Push server Image
      - Push sector-ui-Image
      trigger: true
    - task: Write Variables
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: bytecubed/bytecubed-java-ci
        run:
          path: sh
          args:
          - -ec
          - |
            echo image_version = \"`(cat ./version/number)`\" >> vars/terraform.tfvars
            echo ecr_image_region = \"us-east-1\" >> vars/terraform.tfvars
            echo region = \"us-east-2\" >> vars/terraform.tfvars
            echo base_domain = \"((base_domain))\" >> vars/terraform.tfvars
            echo access_key = \"((aws_access_key_id))\" >> vars/terraform.tfvars
            echo access_secret = \"((aws_secret_access_key))\" >> vars/terraform.tfvars
            echo rds_password = \"((rds_password))\" >> vars/terraform.tfvars
            echo aws_account_id = \"((aws_account_id))\" >> vars/terraform.tfvars
            echo "Planning deployment to the dev environment"
        inputs:
        - name: version
        outputs:
        - name: vars
    - put: terraform
      params:
        env_name: dev
        plan_only: true
        terraform_source: source/config/service-setup
        var_files:
        - ./vars/terraform.tfvars
        vars:
          environment: dev
    - put: terraform
      params:
        env_name: dev
        plan_run: true
        terraform_source: source/config/service-setup
        var_files:
        - ./vars/terraform.tfvars
        vars:
          environment: dev
  - name: Execute OWASP Security Scan-Development
    serial: true
    plan:
    - get: version
      passed:
        - Deploy Services To Dev
      trigger: true
    - task: Scan Environment
      privileged: true
      config:
        platform: linux
        image_resource:
          type: latest-docker-image
          source:
            repository: owasp/zap2docker-live
        run:
          path: /bin/bash
          args:
          - -xce
          - |
            echo "starting scan..."
            cd
            # /zap/zap-baseline.py -t http://server-dev.theravenspoe.io/ | grep -q "FAIL-NEW: 0"
            # [ $? -eq 0 ]  || exit 1
            # echo "scan successful, no vulnerabilities found"
  - name: Deploy Services To Test
    serial: true
    plan:
    - get: source
      passed:
      - Deploy Services To Dev
    - get: version
      passed:
      - Deploy Services To Dev
    - task: Write Variables
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: bytecubed/bytecubed-java-ci
        run:
          path: sh
          args:
          - -ec
          - |
            echo image_version = \"`(cat ./version/number)`\" >> vars/terraform.tfvars
            echo ecr_image_region = \"us-east-1\" >> vars/terraform.tfvars
            echo region = \"us-west-1\" >> vars/terraform.tfvars
            echo base_domain = \"((base_domain))\" >> vars/terraform.tfvars
            echo access_key = \"((aws_access_key_id))\" >> vars/terraform.tfvars
            echo access_secret = \"((aws_secret_access_key))\" >> vars/terraform.tfvars
            echo rds_password = \"((rds_password))\" >> vars/terraform.tfvars
            echo aws_account_id = \"((aws_account_id))\" >> vars/terraform.tfvars
            echo "Planning deployment to the test environment"
        inputs:
        - name: version
        outputs:
        - name: vars
    - put: terraform
      params:
        env_name: test
        plan_only: true
        terraform_source: source/config/service-setup
        var_files:
        - ./vars/terraform.tfvars
        vars:
          environment: test
    - put: terraform
      params:
        env_name: test
        plan_run: true
        terraform_source: source/config/service-setup
        var_files:
        - ./vars/terraform.tfvars
        vars:
          environment: test
  - name: Execute OWASP Security Scan Test
    serial: true
    plan:
    - get: version
      trigger: true
      passed:
        - Deploy Services To Test
    - task: Scan Environment
      privileged: true
      config:
        platform: linux
        image_resource:
          type: latest-docker-image
          source:
            repository: owasp/zap2docker-live
        run:
          path: /bin/bash
          args:
          - -c
          - |
            echo "starting scan"
            cd
            # /zap/zap-baseline.py -t http://server-test.theravenspoe.io/ | grep -q "FAIL-NEW: 0"
            # [ $? -eq 0 ]  || exit 1
            # echo "scan successful, no vulnerabilities found"
  - name: Deploy Services To Production
    serial: true
    plan:
    - get: source
    - get: version
      passed:
      - Execute OWASP Security Scan Test
    - task: Write Variables
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: bytecubed/bytecubed-java-ci
        run:
          path: sh
          args:
          - -ec
          - |
            echo image_version = \"`(cat ./version/number)`\" >> vars/terraform.tfvars
            echo ecr_image_region = \"us-east-1\" >> vars/terraform.tfvars
            echo region = \"us-west-2\" >> vars/terraform.tfvars
            echo base_domain = \"((base_domain))\" >> vars/terraform.tfvars
            echo access_key = \"((aws_access_key_id))\" >> vars/terraform.tfvars
            echo access_secret = \"((aws_secret_access_key))\" >> vars/terraform.tfvars
            echo rds_password = \"((rds_password))\" >> vars/terraform.tfvars
            echo aws_account_id = \"((aws_account_id))\" >> vars/terraform.tfvars
            echo "Planning deployment to the prod environment"
        inputs:
        - name: version
        outputs:
        - name: vars
    - put: terraform
      params:
        env:
          AWS_REGION: us-west-2
        env_name: prod
        plan_only: true
        terraform_source: source/config/service-setup
        var_files:
        - ./vars/terraform.tfvars
        vars:
          environment: prod
    - put: terraform
      params:
        env:
          AWS_REGION: us-west-2
        env_name: prod
        plan_run: true
        terraform_source: source/config/service-setup
        var_files:
        - ./vars/terraform.tfvars
        vars:
          environment: prod
  - name: Execute OWASP Security Scan Prod
    serial: true
    plan:
    - get: version
      trigger: true
      passed:
        - Deploy Services To Production
    - task: Scan Environment
      privileged: true
      config:
        platform: linux
        image_resource:
          type: latest-docker-image
          source:
            repository: owasp/zap2docker-live
        run:
          path: /bin/bash
          args:
          - -c
          - |
            echo "starting scan"
            cd
            # /zap/zap-baseline.py -t http://wwww.theravenspoe.io/ | grep -q "FAIL-NEW: 0"
            # [ $? -eq 0 ]  || exit 1
            # echo "scan successful, no vulnerabilities found"
