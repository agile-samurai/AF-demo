resource_types:
  - name: terraform
    type: docker-image
    source:
      repository: ljfranklin/terraform-resource
      tag: 0.12.5
  - name: latest-docker-image
    type: docker-image
    privileged: true
    source:
      repository: concourse/docker-image-resource
      tag: latest
      registry_mirror: "https://mirror.gcr.io"
  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource
  - name: simple-s3-resource
    type: docker-image
    source:
      repository: 18fgsa/s3-resource-simple

resources:
  - name: slack-notify
    type: slack-notification
    source:
      url: ((slack_webhook))
  - name: terraform
    type: terraform
    source:
      backend_type: s3
      backend_config:
        bucket: ((tf_backend))
        key: rdso.tfstate
        region: ((bucket_aws_region))
        access_key: ((aws_access_key_id))
        secret_key: ((aws_secret_access_key))
      vars:
        tag_name: concourse
      env:
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
  #      TF_LOG: DEBUG
  - name: source
    type: git
    source: &repo-source
      uri: ((git_source_url))
      branch: master
      private_key: ((git_private_key))
#      ignore_paths: [services/scoring-service, notebooks]
  - name: version
    type: semver
    source:
      driver: git
      uri: ((git_version_url))
      initial_version: 0.0.1
      branch: version
      file: version
      private_key: ((git_private_key))
  ################### Resources ECR REPOS ######################
  - name: server-docker-image
    type: latest-docker-image
    source:
      aws_access_key_id: ((aws_access_key_id))
      aws_secret_access_key: ((aws_secret_access_key))
      repository: ((aws_account_id)).dkr.ecr.us-east-1.amazonaws.com/server
  - name: main-ds-service-docker-image
    type: latest-docker-image
    source:
      repository: ((aws_account_id)).dkr.ecr.us-east-1.amazonaws.com/data-science-service
      aws_access_key_id: ((aws_access_key_id))
      aws_secret_access_key: ((aws_secret_access_key))
  - name: client-docker-image
    type: latest-docker-image
    source:
      repository: ((aws_account_id)).dkr.ecr.us-east-1.amazonaws.com/ui
      aws_access_key_id: ((aws_access_key_id))
      aws_secret_access_key: ((aws_secret_access_key))
  - name: models
    type: simple-s3-resource
    source:
      access_key_id: ((aws_access_key_id))
      secret_access_key: ((aws_secret_access_key))
      bucket: rdso-challenge2
      path: data/ci
      options: ["--quiet"]
      region: us-east-1
  - name: data
    type: simple-s3-resource
    source:
      access_key_id: {{aws_access_key_id}}
      secret_access_key: {{aws_secret_access_key}}
      bucket: rdso-challenge2
      path: data/ci
      options: ["--quiet"]
      region: us-east-1

groups:
  - name: all
    jobs:
    - Create Terraform Persistence
    #- Create Infra
    - Initialize
    - Build UI
    - Build server and SonarQube
    - Execute server Functional Tests
    - Execute server Contract Tests
    - Execute UI Automated Tests
    - Provision ECR Repositories
    - Push UI
    - Push server Image
    - Push DS Image
    - Deploy Services To Dev
    - Deploy Services To Test
    - Deploy Services To Production
    - Execute OWASP Security Scan Prod
    - Execute main-ds-service Tests
    - Build Data Model
    - Capture data and push to s3
  - name: prepare
    jobs:
    - Create Terraform Persistence
    #- Create Infra
    - Initialize
  - name: model building
    jobs:
    - Capture data and push to s3
    - Build Data Model
    #- Push Data Service
  - name: build-and-test
    jobs:
    - Build UI
    - Build server and SonarQube
    - Execute server Functional Tests
    - Execute server Contract Tests
    - Execute UI Automated Tests
    - Execute main-ds-service Tests
  - name: publish-and-scan
    jobs:
    - Provision ECR Repositories
    - Push UI
    - Push server Image
    - Push DS Image
    - Deploy Services To Dev
    - Deploy Services To Test
    - Deploy Services To Production
    - Execute OWASP Security Scan Prod
  - name: destroy
    jobs:
      - terraform-destroy-all-envs
      - terraform-destroy-dev-service
      - terraform-destroy-test-service
      - terraform-destroy-prod-service

jobs:
  - name: Create Terraform Persistence
    public: true
    serial: true
    plan:
      - get: source
        trigger: false
      - task: Create Buckets
        params:
          AWS_ACCESS_KEY_ID: ((aws_access_key_id))
          AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
          AWS_DEFAULT_REGION: us-east-1
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ugroup/centos-terraform-aws
          run:
            path: sh
            args:
              - -exc
              - |
                echo aws_region = \"((bucket_aws_region))\" >> vars/terraform.tfvars
                echo aws_account_id = \"((aws_account_id))\" >> vars/terraform.tfvars
                echo bucket_name = \"((tf_backend))\" >> vars/terraform.tfvars
                echo "Creating Repository Persistence"
                aws s3api create-bucket --bucket ((tf_backend)) --region us-east-1
          outputs:
            - name: vars
  # TODO: test this
  # - name: Create Infra
  #   public: true
  #   serial: true
  #   plan:
  #     - get: source
  #       passed: [Initialize]
  #     - put: terraform
  #       params:
  #         terraform_source: source/config/infra-setup/scripts
  #         plan_only: true
  #         env_name: infra
  #         env:
  #           TF_VAR_access_key: ((aws_access_key_id))
  #           TF_VAR_access_secret: ((aws_secret_access_key))
  #           TF_VAR_aws_account_id: ((aws_account_id))
  #           TF_VAR_aws_infra_region: ((aws_infra_region))
  #           TF_VAR_sonarqube_rds_username: ((sonarqube_rds_username))
  #           TF_VAR_sonarqube_rds_password: ((sonarqube_rds_password))
  #           TF_VAR_project: ((project))
  #     - put: terraform
  #       params:
  #         terraform_source: source/config/infra-setup/scripts
  #         env_name: infra
  #         plan_run: true
  #         env:
  #           TF_VAR_access_key: ((aws_access_key_id))
  #           TF_VAR_access_secret: ((aws_secret_access_key))
  #           TF_VAR_aws_account_id: ((aws_account_id))
  #           TF_VAR_aws_infra_region: ((aws_infra_region))
  #           TF_VAR_sonarqube_rds_username: ((sonarqube_rds_username))
  #           TF_VAR_sonarqube_rds_password: ((sonarqube_rds_password))
  #           TF_VAR_project: ((project))

  - name: Initialize
    public: true
    plan:
      - get: source
        trigger: true
      - put: version
        params: {bump: minor}
  - name: terraform-destroy-all-envs
    public: false
    plan:
    - put: terraform
      get_params:
        action: destroy
      params:
        env_name: ecr
        terraform_source: source/config/ecr-setup
        action: destroy
        env:
          TF_VAR_aws_region: ((bucket_aws_region))
          TF_VAR_aws_account_id: ((aws_account_id))
          TF_VAR_bucket_name: ((tf_backend))
  #   - get: source
  #   - put: terraform
  #     get_params:
  #       action: destroy
  #     params:
  #       terraform_source: source/config/service-setup
  #       action:
  #       env_name: dev
  #   - put: terraform
  #     get_params:
  #       action: destroy
  #     params:
  #       terraform_source: source/config/service-setup
  #       action:
  #       env_name: test
  #   - put: terraform
  #     get_params:
  #       action: destroy
  #     params:
  #       terraform_source: source/config/service-setup
  #       action:  destroy
  #       env_name: prod
  - name: terraform-destroy-dev-service
    public: false
    serial: true
    plan:
    - get: source
    - put: terraform
      get_params:
        action: destroy
      params:
        terraform_source: source/config/service-setup
        action: destroy
        env_name: dev  #workspace
        env:
          TF_VAR_access_key: ((aws_access_key_id))
          TF_VAR_access_secret: ((aws_secret_access_key))
          TF_VAR_aws_account_id: ((aws_account_id))
          TF_VAR_bucket_name: ((tf_backend))
          TF_VAR_images_version: "noop"
          TF_VAR_infra_version: "noop"
  - name: terraform-destroy-test-service
    public: false
    serial: true
    plan:
    - get: source
    - put: terraform
      get_params:
        action: destroy
      params:
        terraform_source: source/config/service-setup
        action: destroy
        env_name: test  #workspace
        env:
          TF_VAR_access_key: ((aws_access_key_id))
          TF_VAR_access_secret: ((aws_secret_access_key))
          TF_VAR_aws_account_id: ((aws_account_id))
          TF_VAR_bucket_name: ((tf_backend))
          TF_VAR_images_version: "noop"
          TF_VAR_infra_version: "noop"
  - name: terraform-destroy-prod-service
    public: false
    serial: true
    plan:
    - get: source
    - put: terraform
      get_params:
        action: destroy
      params:
        terraform_source: source/config/service-setup
        action: destroy
        env_name: prod  #workspace
        env:
          TF_VAR_access_key: ((aws_access_key_id))
          TF_VAR_access_secret: ((aws_secret_access_key))
          TF_VAR_aws_account_id: ((aws_account_id))
          TF_VAR_bucket_name: ((tf_backend))
          TF_VAR_images_version: "noop"
          TF_VAR_infra_version: "noop"
  - name: Capture data and push to s3
    public: true
    serial: true
    plan:
      - get: source
        passed: [Initialize]
      - task: Gather Data
        params:
          AWS_ACCESS_KEY_ID: ((aws_access_key_id))
          AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
          AWS_DEFAULT_REGION: us-east-1
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: carlomazzaferro/concourse-python-minimal
          run:
            path: sh
            args:
            - -ec
            - |
              cd source/services/data-science-service/imdb-scraper
              pip install --quiet -r requirements.txt
              export TESTING=true
              export MAX_TRAINING_FILES=500
              python scraper.py && python parser.py
              cd ../rdso
              apt-get -qq update && apt-get -qq install gcc
              # yum -y install epel-release
              # yum -y install python-pip
              pip install --quiet --upgrade pip
              pip install --quiet -r requirements.txt
              python -m nltk.downloader stopwords
              python movies.py
              cd ../../../../
              cp -R source/services/data-science-service/data/ .
              pwd
              ls -all
          inputs:
            - name: source
          outputs:
            - name: data
      - put: data
  - name: Build Data Model
    public: true
    serial: true
    plan:
      - get: source
      # - get: version
      #   passed: [Initialize]
      - get: data
        trigger: true
        passed: [Capture data and push to s3]
      - task: Train model
        params:
          AWS_ACCESS_KEY_ID: ((aws_access_key_id))
          AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
          AWS_DEFAULT_REGION: us-east-1
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: carlomazzaferro/concourse-python-minimal
          run:
            path: sh
            args:
            - -ec
            - |
              mkdir -p source/services/data-science-service/data/
              mkdir -p source/services/data-science-service/models/
              ls ./data/data
              # cp -R ./data/data/movies_df.pkl source/services/data-science-service/data/.
              cp -R ./data/data/* source/services/data-science-service/data/.
              ls -all source/services/data-science-service/data/.
              cd source/services/data-science-service/rdso
              apt-get -qq update && apt-get -qq install gcc
              pip install --quiet --upgrade pip
              pip install --quiet -r requirements.txt
              python -c "import nltk;nltk.download('stopwords')"
              pwd
              ls -all ../../../../
              ls -all ../../../../models
              ls -all ../../../../data
              ls -all ../../../../data/data
              ls -all ../../../../data/data/data
              ls -all
              touch testfile.txt
              python vectorize.py
              ls -all ../models/
              cd ../../../../
              cp -R source/services/data-science-service/models/ .
              cp -R source/services/data-science-service/data/data/* source/services/data-science-service/data/.
              ls source/services/data-science-service/data/
              rm -rf source/services/data-science-service/data/data
          inputs:
            - name: source
            - name: data
          outputs:
            - name: models
      - put: models
  # - name: Push Data Service
  #   public: true
  #   plan:
  #     - get: source
  #       trigger: true
  #       passed: [Provision ECR Repositories]
  #     - get: version
  #       trigger: false
  #     - get: data
  #       trigger: true
  #       passed: [Build Data Model]
  #     - get: models
  #       trigger: true
  #       passed: [Build Data Model]
  #     - task: Package API
  #       params:
  #         AWS_ACCESS_KEY_ID: ((aws_access_key_id))
  #         AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
  #         AWS_DEFAULT_REGION: us-east-1
  #       config:
  #         platform: linux
  #         image_resource:
  #           type: docker-image
  #           source:
  #             repository: carlomazzaferro/concourse-python-minimal
  #         run:
  #           path: sh
  #           args:
  #           - -ec
  #           - |
  #             cd build
  #             cp -r ../source/services/data-science-service/rdso/* .
  #             cp -r ../data .
  #             cp -r ../models .
  #         inputs:
  #           - name: source
  #           - name: data
  #           - name: models
  #         outputs:
  #           - name: build
  #     - put: main-ds-service-docker-image
  #       params:
  #         build: build
  #         tag_file: version/number

###################### BUILD SERVICES ############################
  - name: Build UI
    public: true
    serial: true
    plan:
      - get: source
        trigger: true
        params: {depth: 10}
        passed: [Initialize]
      - get: version
        passed: [Initialize]
      - task: Build Front End
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ugroup/centos-node10-yarn1-17-3
          run:
            path: sh
            args:
            - -ec
            - |
                echo "begin build front end script"
                cd source/ui/sector-ui
                echo "building front end"
                npm install --silent
                yarn build
                echo "front end build complete"
                echo "installing sonarqube"
                npm install -g sonarqube-scanner --silent
                sonar-scanner -h
                echo "installing sonarqube"
                sonar-scanner -Dsonar.host.url=((sonarqube_url)) -Dsonar.projectKey=rdso-ui -Dsonar.projectName=rdso-ui -Dsonar.sources=./src
                echo "pushing results to sonarqube complete"

                # echo "running pa11y"
                # npm install -g pa11y --silent
                # pa11y source/ui

                echo "preparing files for container build"
                cp ./container/Dockerfile ../../../docker/.
                cp ./container/start-nginx.sh ../../../docker/.
                cp -Rf ./container/config ../../../docker/.
                cp -Rf ./build ../../../docker/.
          inputs:
          - name: source
          outputs:
          - name: docker
        on_failure:
          put: slack-notify
          params:
            channel: '#build_notifications'
            text: |
              "Build failed on job 'Build-Project'. Check it out at: 'https://3.226.130.180/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME'"
            silent: true

  - name: Execute UI Automated Tests
    public: true
    plan:
      - get: source
        passed:
          - Build server and SonarQube
        trigger: true
      - get: version
        passed:
          - Build server and SonarQube
      - task: Execute Test
        privileged: true
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: bradbytecubed/mdas-pipeline
          run:
            path: entrypoint.sh
            args:
              - bash
              - -exc
              - |
                echo "Noop for now"
          inputs:
            - name: source
          caches:
            - path: maven

  - name: Build server and SonarQube
    serial: true
    public: true
    plan:
      - get: source
        passed:
          - Initialize
        trigger: true
        params:
          depth: 10
      - get: version
        passed:
          - Initialize
        trigger: true
      - task: SonarQube Scan
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ugroup/openjdk10-maven
          run:
            path: sh
            args:
            - -ec
            - |
              cd source/ui/server
              # must compile first with java10 for sonarqube
              mvn clean install -DskipTests -Djava.version=10
              mvn sonar:sonar -DskipTests -Dsonar.java.source=10 -B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dsonar.projectKey=rdso-server -Dsonar.projectName=rdso-server -Dsonar.host.url=((sonarqube_url)) -Dsonar.sources=src/main -Dsonar.exclusions=src/main/webapp/WEB-INF/static/build/css/*,src/main/webapp/WEB-INF/static/build/js/* -Dsonar.tests=src/test/java  -Dsonar.java.binaries=./target/classes/
          inputs:
          - name: source
      - task: Build Server
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ugroup/openjdk12-maven
          run:
            path: sh
            args:
            - -ec
            - |
              cd source/ui/server
              # now build with java 12
              mvn clean install -Djava.version=12 -DskipTests -B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn ### do tests
          inputs:
          - name: source
          outputs:
          - name: vars
      # on_failure:
      #   put: slack-notify
      #   params:
      #     channel: '#build_notifications'
      #     text: |
      #       "Build failed on job 'Build-Project'. Check it out at: 'https://3.226.130.180/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME'"
      #     silent: true

###################### FUNCTIONAL TESTS############################
  # - name: Execute main-ds-service Unit and Integration Tests
  #   public: true
  #   plan:
  #     - get: source
  #       trigger: true
  #       passed:
  #         - Initialize
  #     - get: version
  #       passed:
  #         - Initialize
  #     - task: Execute Test
  #       config:
  #         platform: linux
  #         image_resource:
  #           type: docker-image
  #           source:
  #             repository: carlomazzaferro/concourse-python-minimal
  #         run:
  #           path: sh
  #           args:
  #           - -ec
  #           - |
  #             cd source/services/data-science-service
  #             mkdir -p models/s3
  #             pip install -r requirements.txt
  #             pytest
  #         inputs:
  #           - name: source

  - name: Execute server Functional Tests
    public: true
    plan:
      - get: source
        passed:
          - Build server and SonarQube
        trigger: true
      - get: version
        passed:
          - Build server and SonarQube
      - task: Execute Test
        privileged: true
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: bradbytecubed/mdas-pipeline
          run:
            path: entrypoint.sh
            args:
              - bash
              - -exc
              - |
                echo "Noop for now"
          inputs:
            - name: source
          caches:
            - path: maven

###################### CONTRACT TESTS ############################
  - name: Execute main-ds-service Tests
    public: true
    plan:
      - get: source
        trigger: true
        passed: [Initialize]
      - get: models
        trigger: true
        ##add me back passed: [Build Data Model]
      - get: version
        passed: [Initialize]
      - task: Execute Test
        privileged: true
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: python
              tag: 3.7
          inputs:
            - name: source
            - name: version
          run:
            path: /bin/bash
            args:
              - -exc
              - |
                cd source/services/data-science-service
                # pip install --upgrade pip && pip install -r tests_require.txt
                # pip list
                # /usr/local/bin/pytest --junitxml results.xml
                # echo "Push results to sonarqube"
                # wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.0.0.1744-linux.zip
                # unzip -qq sonar-*
                # rm sonar-*.zip
                # mv sonar* sonar-scanner
                # export PROJECT_VERSION=`cat version/number`
                # sonar-scanner/bin/sonar-scanner -h
                # sonar-scanner/bin/sonar-scanner -Dsonar.sources=./rdso -Dsonar.tests=./tests -Dsonar.projectVersion="${PROJECT_VERSION}" -Dsonar.projectKey=rdso-dss -Dsonar.projectName=rdso-dss -Dsonar.host.url=http://sonarqube-infra-lb-907710278.us-east-2.elb.amazonaws.com -Dsonar.python.xunit.reportPath=./results.xml
  - name: Execute server Contract Tests
    public: true
    plan:
      - get: source
        passed:
          - Execute server Functional Tests
        trigger: true
      - get: version
        passed:
          - Execute server Functional Tests
      - task: Execute Test
        privileged: true
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: bradbytecubed/mdas-pipeline
          run:
            path: entrypoint.sh
            args:
              - bash
              - -exc
              - |
                echo "Noop for now"
          inputs:
            - name: source
          caches:
            - path: maven

  ###################### ARTIFACT PUBLISH ############################
  - name: Provision ECR Repositories
    public: true
    serial: true
    plan:
      - get: version
      - get: source
        passed:
          #- Execute main-ds-service Contract Tests
          - Execute server Contract Tests
          - Build UI
          #- Push DS Image
        trigger: true
      - put: terraform
        params:
          terraform_source: source/config/ecr-setup
          plan_only: true
          env_name: ecr   #workspace
          env:
            TF_VAR_aws_region: ((bucket_aws_region))
            TF_VAR_aws_account_id: ((aws_account_id))
            TF_VAR_bucket_name: ((tf_backend))
      - put: terraform
        params:
          terraform_source: source/config/ecr-setup
          env_name: ecr
          plan_run: true
          env:
            TF_VAR_aws_region: ((bucket_aws_region))
            TF_VAR_aws_account_id: ((aws_account_id))
            TF_VAR_bucket_name: ((tf_backend))

  - name: Push UI
    public: true
    plan:
      - get: source
        trigger: true
        passed: [Provision ECR Repositories]
      - get: version
        passed: [Provision ECR Repositories]
      - task: Build Front End Image
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ugroup/centos-node10-yarn1-17-3
          run:
            path: sh
            args:
            - -ec
            - |
              echo "begin build front end script"
              cd source/ui/sector-ui

              echo "building front end"
              npm install
              yarn build
              echo "front end build complete"

              echo "pushing results to sonarqube"
              echo "pushing results to sonarqube complete"

              echo "preparing files for container build"
              cp ./container/Dockerfile ../../../docker/.
              cp ./container/start-nginx.sh ../../../docker/.
              cp -Rf ./container/config ../../../docker/.
              cp -Rf ./build ../../../docker/.
          inputs:
            - name: source
          outputs:
            - name: docker
      - put: client-docker-image
        params: {build: docker, tag_file: version/number}

  - name: Push server Image
    public: true
    plan:
      - get: source
        passed:
          - Provision ECR Repositories
        trigger: true
      - get: version
        passed:
          - Provision ECR Repositories
      - task: Build Server Image
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ugroup/openjdk12-maven
          run:
            path: sh
            args:
            - -ec
            - |
              cd source/ui/server
              mvn clean install -DskipTests -B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
              cp Dockerfile ../../../docker
              cp -R target ../../../docker/target
          inputs:
            - name: source
          outputs:
            - name: docker
          caches:
            - path: maven
      - put: server-docker-image
        params:
          build: docker
          tag_file: version/number

  # - name: Push main-ds-service Image
  #   public: true
  #   plan:
  #     - get: source
  #       passed:
  #         - Provision ECR Repositories
  #       trigger: true
  #     - get: version
  #       passed:
  #         - Provision ECR Repositories
  #     - put: main-ds-service-docker-image
  #       params:
  #         build: source/services/data-science-service/rdso
  #         tag_file: version/number
  #         #additional_tags:
  #          # -
  - name: Push DS Image
    public: true
    serial: true
    plan:
      - get: source
        trigger: true
        passed: [ Provision ECR Repositories]
      - get: version
        trigger: false
        passed: [ Provision ECR Repositories]
      - get: models
        trigger: true
        passed: [Execute main-ds-service Tests]
      - get: data
      - task: Package API
        params:
          AWS_ACCESS_KEY_ID: ((aws_access_key_id))
          AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
          AWS_DEFAULT_REGION: us-east-1
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: carlomazzaferro/concourse-python-minimal
          run:
            path: sh
            args:
            - -ec
            - |
              cd build
              cp -r ../source/services/data-science-service/rdso/* .
              cp -r ../data/data .
              cp -r ../models/models .
          inputs:
            - name: source
            - name: data
            - name: models
          outputs:
            - name: build
      - put: main-ds-service-docker-image
        params:
          build: build
          tag_file: version/number
###################### DEPLOY SERVICE ############################
  - name: Deploy Services To Dev
    serial: true
    plan:
    - get: source
      passed:
      - Push DS Image
      - Push server Image
      - Push UI
      trigger: true
    - get: version
      passed:
      - Push DS Image
      - Push server Image
      - Push UI
      trigger: true
    - task: Write Variables and Run TF Deploy
      params:
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        TF_VAR_access_key: ((aws_secret_access_key))
        TF_VAR_ecr_image_region: us-east-1
        #TF_VAR_aws_region: us-east-1
        TF_VAR_base_domain: ((base_domain))
        TF_VAR_access_key: ((aws_access_key_id))
        TF_VAR_access_secret: ((aws_secret_access_key))
        TF_VAR_rds_password: ((rds_password))
        TF_VAR_db_pass: ((rds_password))
        TF_VAR_db_user: dbusername1
        TF_VAR_infra_version: useless
        TF_VAR_aws_account_id: ((aws_account_id))
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ugroup/centos-terraform-aws
        run:
          path: sh
          args:
          - -ec
          - |
            export TF_VAR_images_version=`cat version/number`

            cd source/config/service-setup
            terraform version
            terraform init
            # Always try to create the workspace, ignore non-zero exit code if it already exists
            terraform workspace new dev || true
            terraform workspace list
            terraform workspace select dev
            terraform refresh
            #export TF_LOG=debug
            terraform apply -parallelism=20 --auto-approve

            echo "Waiting for server to come up"
            export SERVER_DNS_NAME=`terraform output server_dns_name`
            cd ../..
            ./wait-for-status-code-at-url.sh "${SERVER_DNS_NAME}/health" 200
            echo "Server is up!!"
        inputs:
        - name: source
        - name: version
        outputs:
        - name: vars
#    - put: terraform
#      params:
#        env_name: dev
#        plan_only: true
#        terraform_source: source/config/service-setup
#        var_files:
#        - ./vars/terraform.tfvars
#        vars:
#          environment: dev
#    - put: terraform
#      params:
#        env_name: dev
#        plan_run: true
#        terraform_source: source/config/service-setup
#        var_files:
#        - ./vars/terraform.tfvars
#        vars:
#          environment: dev

  - name: Deploy Services To Test
    serial: true
    plan:
    - get: source
      passed:
      - Push DS Image
      - Push server Image
      - Push UI
      # passed:
      # - Deploy Services To Dev
    - get: version
      # passed:
      # - Execute OWASP Security Scan Test
    - task:  Write Variables and Run TF Deploy
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ugroup/centos-terraform-aws
        run:
          path: sh
          args:
          - -ec
          - |
            echo images_version = \"`(cat ./version/number)`\" >> vars/terraform.tfvars
            echo ecr_image_region = \"us-east-1\" >> vars/terraform.tfvars
            #echo region = \"us-east-1\" >> vars/terraform.tfvars
            echo base_domain = \"((base_domain))\" >> vars/terraform.tfvars
            echo access_key = \"((aws_access_key_id))\" >> vars/terraform.tfvars
            echo access_secret = \"((aws_secret_access_key))\" >> vars/terraform.tfvars
            echo rds_password = \"((rds_password))\" >> vars/terraform.tfvars
            echo db_pass = \"((rds_password))\" >> vars/terraform.tfvars
            echo db_user = \"dbusername1\" >> vars/terraform.tfvars
            echo infra_version = \"useless\" >> vars/terraform.tfvars
            echo aws_account_id = \"((aws_account_id))\" >> vars/terraform.tfvars
            echo "Planning deployment to the test environment"
        inputs:
        - name: version
        outputs:
        - name: vars
    - put: terraform
      params:
        # env:
        #   AWS_REGION: ((test_aws_region))
        # env:
        #   TF_VAR_access_key: ((aws_access_key_id))
        #   TF_VAR_access_secret: ((aws_secret_access_key))
        #   TF_VAR_aws_account_id: ((aws_account_id))
        #   TF_VAR_aws_infra_region: ((aws_infra_region))
        #   TF_VAR_sonarqube_rds_username: ((sonarqube_rds_username))
        #   TF_VAR_sonarqube_rds_password: ((sonarqube_rds_password))
        #   TF_VAR_project: ((project))
        env_name: test #terraform workspace
        plan_only: true
        terraform_source: source/config/service-setup
        var_files:
        - ./vars/terraform.tfvars
    - put: terraform
      params:
        # env:
        #   AWS_REGION: ((test_aws_region))
        env_name: test #terraform workspace
        plan_run: true
        terraform_source: source/config/service-setup
        var_files:
        - ./vars/terraform.tfvars
    - task: show-outputs
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: alpine
        inputs:
        - name: terraform
        - name: source
        run:
          path: /bin/sh
          args:
            - -c
            - |
                echo "name: $(cat terraform/name)"
                echo "metadata: $(cat terraform/metadata)"
                # source/wait-for-status-code-at-url.sh "${SERVER_DNS_NAME}/health" 200
                # echo "Server is up!!"
    # - task: Check-Server
    #   config:
    #     platform: linux
    #     image_resource:
    #       type: docker-image
    #       source:
    #         repository: ugroup/centos-terraform-aws
    #     run:
    #       path: sh
    #       args:
    #       - -ec
    #       - |
    #         cd source/config/service-setup
    #         terraform init
    #         terraform workspace select test
    #         #export TF_LOG=debug
    #         #`cat source/.git/HEAD`
    #         echo "Waiting for server to come up"
    #         export SERVER_DNS_NAME=`terraform output server_dns_name`
    #         cd ../..
    #         ./wait-for-status-code-at-url.sh "${SERVER_DNS_NAME}/health" 200
    #         echo "Server is up!!"
        # inputs:
        # - name: source

  - name: Deploy Services To Production
    serial: true
    plan:
    - get: source
      passed:
      - Deploy Services To Test
    - get: version
      # passed:
      # - Execute OWASP Security Scan Test
    - task:  Write Variables and Run TF Deploy
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ugroup/centos-terraform-aws
        run:
          path: sh
          args:
          - -ec
          - |
            echo images_version = \"`(cat ./version/number)`\" >> vars/terraform.tfvars
            echo ecr_image_region = \"us-east-1\" >> vars/terraform.tfvars
            #echo region = \"us-east-1\" >> vars/terraform.tfvars
            echo base_domain = \"((base_domain))\" >> vars/terraform.tfvars
            echo access_key = \"((aws_access_key_id))\" >> vars/terraform.tfvars
            echo access_secret = \"((aws_secret_access_key))\" >> vars/terraform.tfvars
            echo rds_password = \"((rds_password))\" >> vars/terraform.tfvars
            echo db_pass = \"((rds_password))\" >> vars/terraform.tfvars
            echo db_user = \"dbusername1\" >> vars/terraform.tfvars
            echo infra_version = \"useless\" >> vars/terraform.tfvars
            echo aws_account_id = \"((aws_account_id))\" >> vars/terraform.tfvars
            echo "Planning deployment to the prod environment"
        inputs:
        - name: version
        outputs:
        - name: vars
    - put: terraform
      params:
        env:
          AWS_REGION: ((prod_aws_region))
        env_name: prod #terraform workspace
        plan_only: true
        terraform_source: source/config/service-setup
        var_files:
        - ./vars/terraform.tfvars
    - put: terraform
      params:
        env:
          AWS_REGION: ((prod_aws_region))
        env_name: prod #terraform workspace
        plan_run: true
        terraform_source: source/config/service-setup
        var_files:
        - ./vars/terraform.tfvars
    - task: show-outputs
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: alpine
        inputs:
        - name: terraform
        - name: source
        run:
          path: /bin/sh
          args:
            - -c
            - |
                echo "name: $(cat terraform/name)"
                echo "metadata: $(cat terraform/metadata)"

  - name: Execute OWASP Security Scan Prod
    serial: false
    plan:
    - get: version
      trigger: true
      passed:
        - Deploy Services To Dev
      # passed:
      #   - Deploy Services To Production
    - task: Scan Environment
      privileged: true
      timeout: 6m
      config:
        platform: linux
        image_resource:
          type: latest-docker-image
          source:
            repository: owasp/zap2docker-stable
        outputs:
            - name: scan
        run:
          path: /bin/bash
          args:
          - -c
          - |
            echo "starting scan"
            cd  #NEED THIS
            #whoami; pwd #/home/zap
            mkdir -p /zap/wrk
            touch /zap/wrk/report_md
            echo "-t http://google.com" > arguments.txt
            #/zap/zap-baseline.py -h
            /zap/zap-baseline.py -t http://google.com -T 3
            echo "scan successful"
            #pwd
            #ls -all .
            ps -ef
            # need to kill this process: Xvfb :1 -screen 0 1024x768x16 -ac
            kill -15 19
            kill -15 20
            #kill `pidof zap`
            ps -ef
            echo "done"
            exit 0
